/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { VideoStatus } from "./components/emiya-video/emiya-video";
import { Level } from "hls.js";
export { VideoStatus } from "./components/emiya-video/emiya-video";
export { Level } from "hls.js";
export namespace Components {
    interface EmiyaSlider {
        "max": number;
        "min": number;
        "onChange": (value: number) => void;
        "progressBarBaseColor": string;
        "progressBarHeight": number;
        "progressBarLeftColor": string;
        "realtime"?: boolean;
        "reverseXY"?: boolean;
        "shadowProgresses": { start: number; end: number }[];
        "slideHandleRadius": number;
        "value": number;
    }
    interface EmiyaTeleport {
        "targetSelector"?: string;
    }
    interface EmiyaTooltip {
        "boundingElement"?: HTMLElement | undefined;
        "forceVisible"?: boolean | undefined | null;
        "onVisibilityChange"?: (a: boolean) => void;
        "setVisibility": (visible: boolean) => Promise<void>;
    }
    interface EmiyaVerticalSlider {
        "max": number;
        "min": number;
        "onChange": (value: number) => void;
        "onIsDraggingChange"?: (a: boolean) => void;
        "progressBarBaseColor": string;
        "progressBarLeftColor": string;
        "progressBarWidth": number;
        "realtime"?: boolean;
        "reverseXY"?: boolean;
        "slideHandleRadius": number;
        "value": number;
    }
    interface EmiyaVideo {
        "allowSeek"?: boolean;
        "autoHideControlDelay"?: number;
        "getFullScreen": () => Promise<boolean>;
        "getStatus": () => Promise<VideoStatus>;
        "getVolume": () => Promise<number>;
        "onCurrentTimeChange"?: (currentTime: number) => any;
        "onDurationChange"?: (duration: number) => any;
        "onFullScreenChange"?: (fullScreen: boolean) => any;
        "onLevelChange"?: (level: number) => any;
        "onLevelsChange"?: (levels: { id: number; name: string; level?: Level }[]) => any;
        "onStatusChange"?: (status: VideoStatus, message?: any) => any;
        "onVolumeChange"?: (volume: number) => any;
        "pause": () => Promise<void>;
        "play": () => Promise<void>;
        "setCurrentTime": (time: number) => Promise<void>;
        "setFullScreen": (value: boolean) => Promise<void>;
        "setLevel": (level: number) => Promise<void>;
        "setVolume": (value: number) => Promise<void>;
        "src"?: string;
        "watermark"?: string;
    }
    interface EmiyaVideoPlayer {
    }
    interface EmiyaVideoProgressBar {
        "allowSeek"?: boolean;
        "onCurrentTimeChange"?: (a: number) => void;
        "onDurationChange"?: (a: number) => void;
        "reverseXY"?: boolean;
        "videoRef"?: HTMLVideoElement | undefined;
    }
    interface EmiyaWatermark {
        "value": string;
    }
    interface LevelController {
        "auto"?: boolean;
        "onChange": (value: number) => any;
        "options": { id: number; name: string; level?: Level }[];
        "value": number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PlaybackRateController {
        "videoRef": HTMLVideoElement;
    }
    interface VolumeController {
        "onChange"?: (value: number) => any;
        "reverseXY"?: boolean;
        "videoRef": HTMLVideoElement;
    }
}
declare global {
    interface HTMLEmiyaSliderElement extends Components.EmiyaSlider, HTMLStencilElement {
    }
    var HTMLEmiyaSliderElement: {
        prototype: HTMLEmiyaSliderElement;
        new (): HTMLEmiyaSliderElement;
    };
    interface HTMLEmiyaTeleportElement extends Components.EmiyaTeleport, HTMLStencilElement {
    }
    var HTMLEmiyaTeleportElement: {
        prototype: HTMLEmiyaTeleportElement;
        new (): HTMLEmiyaTeleportElement;
    };
    interface HTMLEmiyaTooltipElement extends Components.EmiyaTooltip, HTMLStencilElement {
    }
    var HTMLEmiyaTooltipElement: {
        prototype: HTMLEmiyaTooltipElement;
        new (): HTMLEmiyaTooltipElement;
    };
    interface HTMLEmiyaVerticalSliderElement extends Components.EmiyaVerticalSlider, HTMLStencilElement {
    }
    var HTMLEmiyaVerticalSliderElement: {
        prototype: HTMLEmiyaVerticalSliderElement;
        new (): HTMLEmiyaVerticalSliderElement;
    };
    interface HTMLEmiyaVideoElement extends Components.EmiyaVideo, HTMLStencilElement {
    }
    var HTMLEmiyaVideoElement: {
        prototype: HTMLEmiyaVideoElement;
        new (): HTMLEmiyaVideoElement;
    };
    interface HTMLEmiyaVideoPlayerElement extends Components.EmiyaVideoPlayer, HTMLStencilElement {
    }
    var HTMLEmiyaVideoPlayerElement: {
        prototype: HTMLEmiyaVideoPlayerElement;
        new (): HTMLEmiyaVideoPlayerElement;
    };
    interface HTMLEmiyaVideoProgressBarElement extends Components.EmiyaVideoProgressBar, HTMLStencilElement {
    }
    var HTMLEmiyaVideoProgressBarElement: {
        prototype: HTMLEmiyaVideoProgressBarElement;
        new (): HTMLEmiyaVideoProgressBarElement;
    };
    interface HTMLEmiyaWatermarkElement extends Components.EmiyaWatermark, HTMLStencilElement {
    }
    var HTMLEmiyaWatermarkElement: {
        prototype: HTMLEmiyaWatermarkElement;
        new (): HTMLEmiyaWatermarkElement;
    };
    interface HTMLLevelControllerElement extends Components.LevelController, HTMLStencilElement {
    }
    var HTMLLevelControllerElement: {
        prototype: HTMLLevelControllerElement;
        new (): HTMLLevelControllerElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPlaybackRateControllerElement extends Components.PlaybackRateController, HTMLStencilElement {
    }
    var HTMLPlaybackRateControllerElement: {
        prototype: HTMLPlaybackRateControllerElement;
        new (): HTMLPlaybackRateControllerElement;
    };
    interface HTMLVolumeControllerElement extends Components.VolumeController, HTMLStencilElement {
    }
    var HTMLVolumeControllerElement: {
        prototype: HTMLVolumeControllerElement;
        new (): HTMLVolumeControllerElement;
    };
    interface HTMLElementTagNameMap {
        "emiya-slider": HTMLEmiyaSliderElement;
        "emiya-teleport": HTMLEmiyaTeleportElement;
        "emiya-tooltip": HTMLEmiyaTooltipElement;
        "emiya-vertical-slider": HTMLEmiyaVerticalSliderElement;
        "emiya-video": HTMLEmiyaVideoElement;
        "emiya-video-player": HTMLEmiyaVideoPlayerElement;
        "emiya-video-progress-bar": HTMLEmiyaVideoProgressBarElement;
        "emiya-watermark": HTMLEmiyaWatermarkElement;
        "level-controller": HTMLLevelControllerElement;
        "my-component": HTMLMyComponentElement;
        "playback-rate-controller": HTMLPlaybackRateControllerElement;
        "volume-controller": HTMLVolumeControllerElement;
    }
}
declare namespace LocalJSX {
    interface EmiyaSlider {
        "max"?: number;
        "min"?: number;
        "onChange"?: (value: number) => void;
        "progressBarBaseColor"?: string;
        "progressBarHeight"?: number;
        "progressBarLeftColor"?: string;
        "realtime"?: boolean;
        "reverseXY"?: boolean;
        "shadowProgresses"?: { start: number; end: number }[];
        "slideHandleRadius"?: number;
        "value"?: number;
    }
    interface EmiyaTeleport {
        "targetSelector"?: string;
    }
    interface EmiyaTooltip {
        "boundingElement"?: HTMLElement | undefined;
        "forceVisible"?: boolean | undefined | null;
        "onVisibilityChange"?: (a: boolean) => void;
    }
    interface EmiyaVerticalSlider {
        "max"?: number;
        "min"?: number;
        "onChange"?: (value: number) => void;
        "onIsDraggingChange"?: (a: boolean) => void;
        "progressBarBaseColor"?: string;
        "progressBarLeftColor"?: string;
        "progressBarWidth"?: number;
        "realtime"?: boolean;
        "reverseXY"?: boolean;
        "slideHandleRadius"?: number;
        "value"?: number;
    }
    interface EmiyaVideo {
        "allowSeek"?: boolean;
        "autoHideControlDelay"?: number;
        "onCurrentTimeChange"?: (currentTime: number) => any;
        "onDurationChange"?: (duration: number) => any;
        "onFullScreenChange"?: (fullScreen: boolean) => any;
        "onLevelChange"?: (level: number) => any;
        "onLevelsChange"?: (levels: { id: number; name: string; level?: Level }[]) => any;
        "onStatusChange"?: (status: VideoStatus, message?: any) => any;
        "onVolumeChange"?: (volume: number) => any;
        "src"?: string;
        "watermark"?: string;
    }
    interface EmiyaVideoPlayer {
    }
    interface EmiyaVideoProgressBar {
        "allowSeek"?: boolean;
        "onCurrentTimeChange"?: (a: number) => void;
        "onDurationChange"?: (a: number) => void;
        "reverseXY"?: boolean;
        "videoRef"?: HTMLVideoElement | undefined;
    }
    interface EmiyaWatermark {
        "value"?: string;
    }
    interface LevelController {
        "auto"?: boolean;
        "onChange"?: (value: number) => any;
        "options"?: { id: number; name: string; level?: Level }[];
        "value"?: number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PlaybackRateController {
        "videoRef"?: HTMLVideoElement;
    }
    interface VolumeController {
        "onChange"?: (value: number) => any;
        "reverseXY"?: boolean;
        "videoRef"?: HTMLVideoElement;
    }
    interface IntrinsicElements {
        "emiya-slider": EmiyaSlider;
        "emiya-teleport": EmiyaTeleport;
        "emiya-tooltip": EmiyaTooltip;
        "emiya-vertical-slider": EmiyaVerticalSlider;
        "emiya-video": EmiyaVideo;
        "emiya-video-player": EmiyaVideoPlayer;
        "emiya-video-progress-bar": EmiyaVideoProgressBar;
        "emiya-watermark": EmiyaWatermark;
        "level-controller": LevelController;
        "my-component": MyComponent;
        "playback-rate-controller": PlaybackRateController;
        "volume-controller": VolumeController;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "emiya-slider": LocalJSX.EmiyaSlider & JSXBase.HTMLAttributes<HTMLEmiyaSliderElement>;
            "emiya-teleport": LocalJSX.EmiyaTeleport & JSXBase.HTMLAttributes<HTMLEmiyaTeleportElement>;
            "emiya-tooltip": LocalJSX.EmiyaTooltip & JSXBase.HTMLAttributes<HTMLEmiyaTooltipElement>;
            "emiya-vertical-slider": LocalJSX.EmiyaVerticalSlider & JSXBase.HTMLAttributes<HTMLEmiyaVerticalSliderElement>;
            "emiya-video": LocalJSX.EmiyaVideo & JSXBase.HTMLAttributes<HTMLEmiyaVideoElement>;
            "emiya-video-player": LocalJSX.EmiyaVideoPlayer & JSXBase.HTMLAttributes<HTMLEmiyaVideoPlayerElement>;
            "emiya-video-progress-bar": LocalJSX.EmiyaVideoProgressBar & JSXBase.HTMLAttributes<HTMLEmiyaVideoProgressBarElement>;
            "emiya-watermark": LocalJSX.EmiyaWatermark & JSXBase.HTMLAttributes<HTMLEmiyaWatermarkElement>;
            "level-controller": LocalJSX.LevelController & JSXBase.HTMLAttributes<HTMLLevelControllerElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "playback-rate-controller": LocalJSX.PlaybackRateController & JSXBase.HTMLAttributes<HTMLPlaybackRateControllerElement>;
            "volume-controller": LocalJSX.VolumeController & JSXBase.HTMLAttributes<HTMLVolumeControllerElement>;
        }
    }
}
